#!/usr/bin/env ruby
# ------------------------------------------------------
# File          : ghcurl.rb
# Authors       : ccmywish <ccmywish@qq.com>
# Created on    : <2022-04-12>
# Last modified : <2022-04-13>
#
# ghcurl:
#
#   Download files (and install) from Github releases
#
# ------------------------------------------------------

require 'nokogiri'
require 'open-uri'
require 'ghcurl'

module Ghcurl

  WAREHOUSE = File.expand_path("~/.cache/ghcurl")
  BIN_PATH  = "/usr/local/bin"
  
  class Error < StandardError; end


  def bold(str)       "\e[1m#{str}\e[0m" end
  def green(str)      "\e[32m#{str}\e[0m" end
  def blue(str)       "\e[34m#{str}\e[0m" end

  
  def log(msg)
    puts blue(bold("ghcurl: #{msg}"))
  end
  

  def curl(url, name)
    #if !test('d', WAREHOUSE)
    #  require 'fileutils'
    #  FileUtils.mkdir_p(WAREHOUSE)
    #end
    cmd = "curl -L #{url} --create-dirs -o #{WAREHOUSE}/#{name}"
    system cmd
    log "Downloaded to #{WAREHOUSE}/#{name}"
  end


  def download(repo, ware, version: nil)

    if repo =~ /^https:\/\/github.com/
      require 'uri'
      uri = URI(repo)
      # index 1, take 2
      repo = uri.path.split('/')[1,2].join('/')
    end

    log "checking..."
    unless version
      doc = Nokogiri::HTML5 URI.open("https://github.com/#{repo}/releases/latest")
    else
      doc = Nokogiri::HTML5 URI.open("https://github.com/#{repo}/releases/tag/v#{version}")
    end


    links = doc.css("li>a[href^='/#{repo}/releases/download']")
    if links.empty?
      puts doc.css('li a').map(&:to_s)
      log <<~EOE
      The search result is empty, check the args:
              repo:    #{repo}
              version: #{version ? version:'nil'}
              regexp:  #{ware}
      EOE
      puts
    end
    
    link = links.each do
      break _1['href'] if _1['href'] =~ /#{ware}/
    end

    url = "https://github.com" + link

    log "Downloading #{url}"
    
    $downloaded = link.split('/').last

    curl(url, $downloaded)

  end

  def install(ware, place: BIN_PATH)
    case RUBY_PLATFORM
    when /ucrt/i, /mingw/i
      install_on_windows(ware, place)
    else
      install_on_nix(ware, place)
    end
    log "Install finish!"
  end


  def install_on_nix(ware, place)

    target = "#{WAREHOUSE}/#{ware}"

    if target.end_with?('.deb')
      log "Install deb package for you"
      system "sudo dpkg -i #{target}"
      return
    end

    if target.end_with?('.rpm')
      log "Install rpm package for you"
      system "sudo rpm -i #{target}"
      return
    end


    if test 'd', place
      cmd = "sudo install -Dt #{place} -m 755 #{target} "
      system cmd
      log "Install #{ware} to " + place

    else
      unless place.include?('/')
        # User just give it another name
        place = BIN_PATH + '/' + place
      else
        # User give it a path and its name
      end
      log "Installed as " + place
      system "sudo cp #{target} #{place}"
      system "sudo chmod +x #{place}"
    end

  end


  def install_on_windows
  end


  def list_wares
    
    puts blue("In #{WAREHOUSE}")
    puts
    Dir.children(WAREHOUSE).each_with_index do |dict,i|
      puts "  #{blue(i+1)}. #{bold(green(dict))}"
    end
    puts
  end


  def help
    puts <<~EOC
    ghcurl (v#{VERSION}): Download files (and install) from Github releases

    usage:
      ghcurl repo_url  regexp => Search in repo_url the latest to download
      ghcurl user/repo regexp => Search in user/repo the latest to download
      ghcurl url re -v tag    => Download a specific tag version
      ghcurl url re deb/rpm   => Download and install deb/rpm package
      ghcurl url re -i [path] => Download and install to /usr/local/bin
      ghcurl url re -i name   => Download and install as 'name'
      ghcurl -l               => List downloaded files
      ghcurl -h               => Print this help

    example:
      ghcurl rbspy/rbspy 'x86_64.*linux' -v0.11.1
      ghcurl cli/cli deb -i

    EOC
  end

end



####################
# main: CLI Handling
####################
extend Ghcurl

# e.g. ccmywish/binary
gh_repo, ware = ARGV.shift(2)
case gh_repo
when '-l'           then list_wares ; exit
when '-h', '--help' then help ; exit
when nil            then help ; exit
end

if ware.nil?
  log "ghcurl: Download what?"
  log "        use: ghcurl repo file"
  exit
end


arg = ARGV.shift

next_op = true

case arg
when '-v'   
  download gh_repo, ware, version: ARGV.shift
when /-v\d.*/
  v = arg.split('-v')[1]
  download gh_repo, ware, version: v
else
  download gh_repo, ware
  next_op = false
end


if next_op
  next_op = ARGV.shift
else
  next_op = arg
end


case next_op
when '-i' 
  place = ARGV.shift
  if place.nil?
    install($downloaded)
  else
    install($downloaded, place: place)
  end
when /-i.*/
  place = next_op.split('-i')[1]
  install($downloaded, place: place)
end
